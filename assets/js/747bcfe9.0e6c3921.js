"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[941],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),u=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return o.createElement(s.Provider,{value:t},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=u(n),d=r,f=c["".concat(s,".").concat(d)]||c[d]||g[d]||a;return n?o.createElement(f,l(l({ref:t},p),{},{components:n})):o.createElement(f,l({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[c]="string"==typeof e?e:r,l[1]=i;for(var u=2;u<a;u++)l[u]=n[u];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6454:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>g,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var o=n(7462),r=(n(7294),n(3905));const a={sidebar_position:1},l="use-toggle",i={unversionedId:"hooks/use-toggle",id:"hooks/use-toggle",title:"use-toggle",description:"The useToggle is a hook that allows you to toggle between values. It's useful for cases where you need to toggle between two or more options in a user interface.",source:"@site/docs/hooks/use-toggle.md",sourceDirName:"hooks",slug:"/hooks/use-toggle",permalink:"/react-hooks/docs/hooks/use-toggle",draft:!1,editUrl:"https://github.com/wandersonalwes/react-hooks/tree/main/website/docs/hooks/use-toggle.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"use-disclosure",permalink:"/react-hooks/docs/hooks/use-disclosure"}},s={},u=[{value:"Import",id:"import",level:2},{value:"Usage",id:"usage",level:2},{value:"TypeScript",id:"typescript",level:2},{value:"Set Type",id:"set-type",level:3},{value:"Definition",id:"definition",level:3},{value:"Where:",id:"where",level:4}],p={toc:u},c="wrapper";function g(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"use-toggle"},"use-toggle"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The useToggle is a hook that allows you to toggle between values. It's useful for cases where you need to toggle between two or more options in a user interface.")),(0,r.kt)("h2",{id:"import"},"Import"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import { useToggle } from "@wandersonalwes/react-hooks";\n')),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { useToggle } from "@wandersonalwes/react-hooks";\n\nfunction Demo() {\n  const [value, toggle] = useToggle(["light", "dark"]);\n\n  return <button onClick={toggle}>{value}</button>;\n}\n')),(0,r.kt)("h2",{id:"typescript"},"TypeScript"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"useToggle")," is a generic function that accepts an optional type ",(0,r.kt)("inlineCode",{parentName:"p"},"T")," to specify the type of values that can be toggled. The default type is string."),(0,r.kt)("h3",{id:"set-type"},"Set Type"),(0,r.kt)("p",null,"To specify the type of value that can be toggled, pass a generic type ",(0,r.kt)("inlineCode",{parentName:"p"},"T")," as a parameter to the ",(0,r.kt)("inlineCode",{parentName:"p"},"useToggle")," function. Here's an example of how to specify the type for a list of numbers:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { useToggle } from "@wandersonalwes/react-hooks";\n\nfunction Demo() {\n  const [value, toggle] = useToggle<number>([1, 2]);\n\n  return <button onClick={toggle}>{value}</button>;\n}\n')),(0,r.kt)("h3",{id:"definition"},"Definition"),(0,r.kt)("p",null,"The type definition of ",(0,r.kt)("inlineCode",{parentName:"p"},"useToggle")," is as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"function useToggle<T = string>(\n  options?: readonly T[]\n): readonly [T, () => void];\n")),(0,r.kt)("h4",{id:"where"},"Where:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T"),": is the generic type of the value that can be toggled. The default value is string."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"options"),": is a list of options that can be toggled."),(0,r.kt)("li",{parentName:"ul"},"Returns a tuple containing the current value and the function to toggle the value.")))}g.isMDXComponent=!0}}]);